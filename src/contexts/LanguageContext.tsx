import React, { createContext, useContext, useState, ReactNode } from 'react';

type Language = 'hi' | 'en';

interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => void;
  t: (key: string) => string;
}

const translations = {
  hi: {
    // Header
    templeTitle: "рдХрд╛рд▓рд╛рд░рд╛рдо рдордВрджрд┐рд░",
    sacredMantra: "ЁЯХЙя╕П реР рдирдордГ рд╢рд┐рд╡рд╛рдп",
    
    // Homepage
    templeName: "рдХрд╛рд▓рд╛рд░рд╛рдо рдордВрджрд┐рд░",
    cityName: "рдирд╛рд╢рд┐рдХ",
    mainMantra: "ЁЯХЙя╕П реР рд╢реНрд░реА рд░рд╛рдо рдЬрдп рд░рд╛рдо рдЬрдп рдЬрдп рд░рд╛рдо ЁЯХЙя╕П",
    welcomeText: "рдкрд╡рд┐рддреНрд░ рдХрд╛рд▓рд╛рд░рд╛рдо рдордВрджрд┐рд░ рдХреА рджрд┐рд╡реНрдп рдпрд╛рддреНрд░рд╛ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИред рдЗрд╕ рдбрд┐рдЬрд┐рдЯрд▓ рддреАрд░реНрдердпрд╛рддреНрд░рд╛ рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рдордВрджрд┐рд░ рдХреЗ рдкреНрд░рддреНрдпреЗрдХ рдкрд╡рд┐рддреНрд░ рд╕реНрдерд╛рди рдХреА рдХрд╣рд╛рдиреА рдЬрд╛рдиреЗрдВред",
    startJourney: "рдбрд┐рдЬрд┐рдЯрд▓ рддреАрд░реНрдердпрд╛рддреНрд░рд╛ рд╢реБрд░реВ рдХрд░реЗрдВ",
    spiritualJourney: "рдЖрдкрдХреА рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рдпрд╛рддреНрд░рд╛",
    experienceStories: "рдордВрджрд┐рд░ рдХреЗ рд╣рд░ рдХреЛрдиреЗ рдХреА рдкрд╡рд┐рддреНрд░ рдХрд╣рд╛рдиреА рдХрд╛ рдЕрдиреБрднрд╡ рдХрд░реЗрдВ",
    
    // Features
    interactiveMap: "рдЗрдВрдЯрд░реИрдХреНрдЯрд┐рд╡ рдордВрджрд┐рд░ рдорд╛рдирдЪрд┐рддреНрд░",
    mapDescription: "рдордВрджрд┐рд░ рдХреЗ 10 рдкрд╡рд┐рддреНрд░ рд╕реНрдерд╛рдиреЛрдВ рдХреЛ рджреЗрдЦреЗрдВ рдФрд░ рдЙрдирдХреА рдХрд╣рд╛рдирд┐рдпреЛрдВ рдХреА рдЦреЛрдЬ рдХрд░реЗрдВред рдкреНрд░рддреНрдпреЗрдХ рд╕реНрдерд╛рди рдкрд░ QR рдХреЛрдб рд╕реНрдХреИрди рдХрд░реЗрдВ рдпрд╛ рдорд╛рдирдЪрд┐рддреНрд░ рдкрд░ рдЯреИрдк рдХрд░реЗрдВред",
    sacredStories: "рдкрд╡рд┐рддреНрд░ рдХрд╣рд╛рдирд┐рдпрд╛рдБ",
    storiesDescription: "рдкреНрд░рддреНрдпреЗрдХ рд╕реНрдерд╛рди рдХрд╛ рдЗрддрд┐рд╣рд╛рд╕, рдорд╣рддреНрд╡ рдФрд░ рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рд╕рдВрджреЗрд╢ рдЬрд╛рдиреЗрдВред рдкрд╛рд░рдВрдкрд░рд┐рдХ рдХрд╣рд╛рдирд┐рдпреЛрдВ рд╕реЗ рдЬреБрдбрд╝реЗрдВред",
    learnAtPace: "рдЕрдкрдиреА рдЧрддрд┐ рд╕реЗ рд╕реАрдЦреЗрдВ",
    paceDescription: "рдЕрдкрдиреА рд╕реБрд╡рд┐рдзрд╛ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдордВрджрд┐рд░ рдХреА рдпрд╛рддреНрд░рд╛ рдХрд░реЗрдВ рдФрд░ рдЧрд╣рд░реА рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рд╕рдордЭ рд╡рд┐рдХрд╕рд┐рдд рдХрд░реЗрдВред",
    experienceQuote: "рдпрд╣ рдбрд┐рдЬрд┐рдЯрд▓ рдЕрдиреБрднрд╡ рд╕рднреА рдЖрдпреБ рд╡рд░реНрдЧ рдХреЗ рднрдХреНрддреЛрдВ рдХреЗ рд▓рд┐рдП рдмрдирд╛рдпрд╛ рдЧрдпрд╛ рд╣реИред рдордВрджрд┐рд░ рдХреЗ рдкрд╡рд┐рддреНрд░ рд╡рд╛рддрд╛рд╡рд░рдг рдореЗрдВ рдбреВрдмрдХрд░ рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рдЬреНрдЮрд╛рди рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВред",
    startTempleVisit: "рдордВрджрд┐рд░ рджрд░реНрд╢рди рд╢реБрд░реВ рдХрд░реЗрдВ",
    
    // Navigation
    templeVisit: "рдордВрджрд┐рд░ рджрд░реНрд╢рди",
    sacredStory: "рдкрд╡рд┐рддреНрд░ рдХрд╣рд╛рдиреА",
    
    // Map
    scanQR: "QR рдХреЛрдб рд╕реНрдХреИрди рдХрд░реЗрдВ рдпрд╛ рдЪреЗрдХрдкреЙрдЗрдВрдЯ рдкрд░ рдЯреИрдк рдХрд░реЗрдВ",
    mapInstructions: "рдордВрджрд┐рд░ рдХреЗ рдкрд╡рд┐рддреНрд░ рд╕реНрдерд╛рдиреЛрдВ рдХреА рдХрд╣рд╛рдирд┐рдпрд╛рдБ рдЬрд╛рдирдиреЗ рдХреЗ рд▓рд┐рдП рдирдХреНрд╢реЗ рдкрд░ рджрд┐рдП рдЧрдП рдмрд┐рдВрджреБрдУрдВ рдкрд░ рдЯреИрдк рдХрд░реЗрдВред",
    
    // Common
    backToMap: "рдордВрджрд┐рд░ рдирдХреНрд╢реЗ рдкрд░ рд╡рд╛рдкрд╕ рдЬрд╛рдПрдВ",
    storyNotFound: "рдХрд╣рд╛рдиреА рдирд╣реАрдВ рдорд┐рд▓реА",
    significance: "рдорд╣рддреНрд╡",
    
    // Checkpoint names
    mainEntrance: "рдореБрдЦреНрдп рдкреНрд░рд╡реЗрд╢ рджреНрд╡рд╛рд░",
    sanctum: "рдЧрд░реНрднрдЧреГрд╣",
    assemblyHall: "рд╕рднрд╛ рдордВрдбрдк",
    ancientInscription: "рдкреНрд░рд╛рдЪреАрди рд╢рд┐рд▓рд╛рд▓реЗрдЦ",
    eastGate: "рдкреВрд░реНрд╡ рджреНрд╡рд╛рд░",
    dharamshala: "рдзрд░реНрдорд╢рд╛рд▓рд╛",
    yagnashala: "рдпрдЬреНрдЮрд╢рд╛рд▓рд╛",
    westCourtyard: "рдкрд╢реНрдЪрд┐рдо рдкреНрд░рд╛рдВрдЧрдг",
    tulsiGarden: "рддреБрд▓рд╕реА рд╡реГрдВрджрд╛рд╡рди",
    sacredPond: "рдкрд╡рд┐рддреНрд░ рдХреБрдВрдб"
  },
  en: {
    // Header
    templeTitle: "Kalaram Mandir",
    sacredMantra: "ЁЯХЙя╕П Om Namah Shivaya",
    
    // Homepage
    templeName: "Kalaram Mandir",
    cityName: "Nashik",
    mainMantra: "ЁЯХЙя╕П Om Shri Ram Jai Ram Jai Jai Ram ЁЯХЙя╕П",
    welcomeText: "Welcome to the divine journey of sacred Kalaram Mandir. Discover the stories of each sacred place through this digital pilgrimage.",
    startJourney: "Start Digital Pilgrimage",
    spiritualJourney: "Your Spiritual Journey",
    experienceStories: "Experience the sacred stories of every corner of the temple",
    
    // Features
    interactiveMap: "Interactive Temple Map",
    mapDescription: "Explore 10 sacred locations of the temple and discover their stories. Scan QR codes at each location or tap on the map.",
    sacredStories: "Sacred Stories",
    storiesDescription: "Learn the history, significance and spiritual message of each location. Connect with traditional stories.",
    learnAtPace: "Learn at Your Own Pace",
    paceDescription: "Visit the temple at your convenience and develop deep spiritual understanding.",
    experienceQuote: "This digital experience is designed for devotees of all ages. Immerse yourself in the sacred atmosphere of the temple and gain spiritual knowledge.",
    startTempleVisit: "Start Temple Visit",
    
    // Navigation
    templeVisit: "Temple Visit",
    sacredStory: "Sacred Story",
    
    // Map
    scanQR: "Scan QR Code or Tap on Checkpoint",
    mapInstructions: "Tap on the points marked on the map to learn stories of the temple's sacred places.",
    
    // Common
    backToMap: "Back to Temple Map",
    storyNotFound: "Story Not Found",
    significance: "Significance",
    
    // Checkpoint names
    mainEntrance: "Main Entrance",
    sanctum: "Sanctum Sanctorum",
    assemblyHall: "Assembly Hall",
    ancientInscription: "Ancient Inscription",
    eastGate: "East Gate",
    dharamshala: "Dharamshala",
    yagnashala: "Yagnashala",
    westCourtyard: "West Courtyard",
    tulsiGarden: "Tulsi Garden",
    sacredPond: "Sacred Pond"
  }
};

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export const LanguageProvider = ({ children }: { children: ReactNode }) => {
  const [language, setLanguage] = useState<Language>('hi');

  const t = (key: string): string => {
    return translations[language][key as keyof typeof translations['hi']] || key;
  };

  return (
    <LanguageContext.Provider value={{ language, setLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};